/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/button_screen/ButtonViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

ButtonViewBase::ButtonViewBase() :
    buttonCallback(this, &ButtonViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box1.setPosition(0, 0, 480, 272);
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(box1);

    button1.setXY(165, 96);
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUND_PRESSED_ID));
    button1.setAction(buttonCallback);
    add(button1);
}

ButtonViewBase::~ButtonViewBase()
{

}

void ButtonViewBase::setupScreen()
{

}

void ButtonViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
    {
        //Interaction2
        //When button1 clicked call setBGcolor on Button
        //Call setBGcolor
        setBGcolor(touchgfx::Color::getColorFromRGB(rand()%256, rand()%256, rand()%256));
    }
}

void ButtonViewBase::setBGcolor(colortype value)
{
    //Interaction1
    //When setBGcolor is called execute C++ code
    //Execute C++ code
    box1.setColor(value);
    box1.invalidate();
}
