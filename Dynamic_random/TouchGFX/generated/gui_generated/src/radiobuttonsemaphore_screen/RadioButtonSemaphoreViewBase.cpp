/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/radiobuttonsemaphore_screen/RadioButtonSemaphoreViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

RadioButtonSemaphoreViewBase::RadioButtonSemaphoreViewBase() :
    radioButtonSelectedCallback(this, &RadioButtonSemaphoreViewBase::radioButtonSelectedCallbackHandler),
    radioButtonDeselectedCallback(this, &RadioButtonSemaphoreViewBase::radioButtonDeselectedCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setPosition(0, 0, 480, 272);
    background.setColor(touchgfx::Color::getColorFromRGB(171, 184, 183));
    add(background);

    radioButtonGroup1.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
    
    radioButtonGroup1.setRadioButtonDeselectedHandler(radioButtonDeselectedCallback);
    
    radioButtonOFF.setXY(96, 80);
    radioButtonOFF.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_ON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_ON_PRESSED_ID));
    radioButtonOFF.setSelected(true);
    radioButtonOFF.setDeselectionEnabled(false);
    radioButtonGroup1.add(radioButtonOFF);
    add(radioButtonOFF);

    radioButtonFast.setXY(96, 160);
    radioButtonFast.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_ON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_ON_PRESSED_ID));
    radioButtonFast.setSelected(false);
    radioButtonFast.setDeselectionEnabled(false);
    radioButtonGroup1.add(radioButtonFast);
    add(radioButtonFast);

    radioButtonSlow.setXY(96, 118);
    radioButtonSlow.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_ON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_SMALL_ROUND_ON_PRESSED_ID));
    radioButtonSlow.setSelected(false);
    radioButtonSlow.setDeselectionEnabled(false);
    radioButtonGroup1.add(radioButtonSlow);
    add(radioButtonSlow);

    Semaphore.setPosition(260, 11, 120, 250);
    boxWithBorder1.setPosition(20, 29, 80, 200);
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(19, 20, 20));
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(88, 95, 128));
    boxWithBorder1.setBorderSize(5);
    Semaphore.add(boxWithBorder1);

    redON.setPosition(20, 29, 80, 80);
    redON.setCenter(40, 40);
    redON.setRadius(25);
    redON.setLineWidth(0);
    redON.setArc(0, 360);
    redONPainter.setColor(touchgfx::Color::getColorFromRGB(222, 11, 32));
    redON.setPainter(redONPainter);
    redON.setVisible(false);
    Semaphore.add(redON);

    redOFF.setPosition(20, 29, 80, 80);
    redOFF.setCenter(40, 40);
    redOFF.setRadius(25);
    redOFF.setLineWidth(0);
    redOFF.setArc(0, 360);
    redOFFPainter.setColor(touchgfx::Color::getColorFromRGB(19, 20, 20));
    redOFF.setPainter(redOFFPainter);
    Semaphore.add(redOFF);

    yellowON.setPosition(20, 91, 80, 80);
    yellowON.setCenter(40, 40);
    yellowON.setRadius(25);
    yellowON.setLineWidth(0);
    yellowON.setArc(0, 360);
    yellowONPainter.setColor(touchgfx::Color::getColorFromRGB(237, 194, 19));
    yellowON.setPainter(yellowONPainter);
    yellowON.setVisible(false);
    Semaphore.add(yellowON);

    yellowOFF.setPosition(20, 91, 80, 80);
    yellowOFF.setCenter(40, 40);
    yellowOFF.setRadius(25);
    yellowOFF.setLineWidth(0);
    yellowOFF.setArc(0, 360);
    yellowOFFPainter.setColor(touchgfx::Color::getColorFromRGB(19, 20, 20));
    yellowOFF.setPainter(yellowOFFPainter);
    Semaphore.add(yellowOFF);

    greenON.setPosition(20, 149, 80, 80);
    greenON.setCenter(40, 40);
    greenON.setRadius(25);
    greenON.setLineWidth(0);
    greenON.setArc(0, 360);
    greenONPainter.setColor(touchgfx::Color::getColorFromRGB(54, 217, 17));
    greenON.setPainter(greenONPainter);
    greenON.setVisible(false);
    Semaphore.add(greenON);

    greenOFF.setPosition(20, 149, 80, 80);
    greenOFF.setCenter(40, 40);
    greenOFF.setRadius(25);
    greenOFF.setLineWidth(0);
    greenOFF.setArc(0, 360);
    greenOFFPainter.setColor(touchgfx::Color::getColorFromRGB(19, 20, 20));
    greenOFF.setPainter(greenOFFPainter);
    Semaphore.add(greenOFF);

    add(Semaphore);
}

RadioButtonSemaphoreViewBase::~RadioButtonSemaphoreViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void RadioButtonSemaphoreViewBase::setupScreen()
{

}

void RadioButtonSemaphoreViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &radioButtonOFF)
    {
        //Interaction1
        //When radioButtonOFF selected call virtual function
        //Call semaphore
        semaphore();
    }
    if (&src == &radioButtonSlow)
    {
        //Interaction3
        //When radioButtonSlow selected call virtual function
        //Call semaphore
        semaphore();
    }
    if (&src == &radioButtonFast)
    {
        //Interaction5
        //When radioButtonFast selected call virtual function
        //Call semaphore
        semaphore();
    }
}

void RadioButtonSemaphoreViewBase::radioButtonDeselectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &radioButtonOFF)
    {
        //Interaction2
        //When radioButtonOFF deselected call virtual function
        //Call semaphore
        semaphore();
    }
    if (&src == &radioButtonSlow)
    {
        //Interaction4
        //When radioButtonSlow deselected call virtual function
        //Call semaphore
        semaphore();
    }
    if (&src == &radioButtonFast)
    {
        //Interaction6
        //When radioButtonFast deselected call virtual function
        //Call semaphore
        semaphore();
    }
}
